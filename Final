8
import java.util.*;
import java.util.PriorityQueue;

public class Main {
    static List<Pair<Pair<Float, Float>, Pair<Character, Integer>>[] adj = new ArrayList[1000000];
    static Map<String, Integer> stateMappingNumber = new HashMap<>();
    static Map<Integer, String> numberMappingState = new HashMap<>();
    static int countOfState;

    public static void addInGraph(int source, int destination, float price, float time, char mode) {
        adj[source].add(new Pair<>(new Pair<>(price, time), new Pair<>(mode, destination)));
    }

    public static void makeGraph(String source, String destination, float price, float time, char mode) {
        int sourceNum, destinationNum;
        if (stateMappingNumber.containsKey(source)) {
            sourceNum = stateMappingNumber.get(source);
        } else {
            stateMappingNumber.put(source, countOfState);
            sourceNum = countOfState;
            countOfState++;
        }

        if (stateMappingNumber.containsKey(destination)) {
            destinationNum = stateMappingNumber.get(destination);
        } else {
            stateMappingNumber.put(destination, countOfState);
            destinationNum = countOfState;
            countOfState++;
        }

        addInGraph(sourceNum, destinationNum, price, time, mode);
    }

    public static String minimumTimeRoute(int source, int destination) {
        PriorityQueue<Pair<Integer, String>> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.first));
        pq.add(new Pair<>(0, "" + source));

        int[] vis = new int[countOfState];
        Arrays.fill(vis, 0);

        for (Map.Entry<String, Integer> entry : stateMappingNumber.entrySet()) {
            numberMappingState.put(entry.getValue(), entry.getKey());
        }

        while (!pq.isEmpty()) {
            int time = pq.peek().first;
            String path = pq.peek().second;
            int node = Integer.parseInt(path.substring(0, path.indexOf(' ')));
            path = path.substring(path.indexOf(' ') + 1);
            pq.poll();
            vis[node] = 1;

            if (node == destination) {
                StringBuilder ans = new StringBuilder();
                int tempNum = 0;
                String tempMode = "";
                String tempSource = numberMappingState.get(source);
                String tempDestination;

                for (int i = 0; i < path.length(); i++) {
                    char c = path.charAt(i);
                    if (c == ' ') {
                        ans.append("Take ").append(tempMode).append(" From ").append(tempSource).append(" to ");
                        tempDestination = numberMappingState.get(tempNum);
                        ans.append(tempDestination).append(" then ");
                        tempNum = 0;
                        tempMode = "";
                        tempSource = tempDestination;
                    } else if (c == '_') {
                        continue;
                    } else if (c >= 'A' && c <= 'Z') {
                        if (c == 'B') {
                            tempMode += "Bus";
                        } else if (c == 'F') {
                            tempMode += "Flight";
                        } else {
                            tempMode += "Train";
                        }
                    } else {
                        tempNum = tempNum * 10 + (c - '0');
                    }
                }

                ans.append(" it will take ").append(time).append(" hours that is the minimum time");
                return ans.toString();
            }

            for (Pair<Pair<Float, Float>, Pair<Character, Integer>> it : adj[node]) {
                if (vis[it.second.second] == 0) {
                    pq.add(new Pair<>(time + it.first.second, node + " " + it.second.second + "_" + it.second.first + " " + path));
                }
            }
        }

        return "no route";
    }

    public static void main(String[] args) {
        for (int i = 0; i < 1000000; i++) {
            adj[i] = new ArrayList<>();
        }

        makeGraph("Delhi", "Chandigarh", 5000.0f, 2.0f, 'F');
        makeGraph("Delhi", "Chandigarh", 2000.0f, 4.0f, 'T');
        makeGraph("Delhi", "Chandigarh", 300.0f, 6.0f, 'B');

        // Add more city connections here...

        System.out.println(minimumTimeRoute(stateMappingNumber.get("Patiala"), stateMappingNumber.get("Pune")));
    }
}
