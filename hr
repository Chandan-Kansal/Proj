5
import java.util.*;

class Pair<F, S> {
    public F first;
    public S second;

    public Pair(F first, S second) {
        this.first = first;
        this.second = second;
    }
}

public String minimumTimeRoute(int source, int destination) {
    PriorityQueue<Pair<Integer, Pair<Integer, String>>> pq = new PriorityQueue<>(Comparator.comparingInt(o -> o.first));
    pq.add(new Pair<>(0, new Pair<>(source, ""));

    List<Integer> vis = new ArrayList<>(countOfState);

    for (Map.Entry<Integer, String> entry : statemappingnumber.entrySet()) {
        numbermappingstate.put(entry.getValue(), entry.getKey());
    }

    while (!pq.isEmpty()) {
        int time = pq.peek().first;
        int node = pq.peek().second.first;
        String path = pq.peek().second.second;
        pq.poll();
        vis.set(node, 1);

        if (node == destination) {
            StringBuilder ans = new StringBuilder();
            int temp_num = 0;
            String temp_mode = "";
            String temp_source = numbermappingstate.get(source);
            String temp_destination = "";

            for (int i = 1; i < path.length(); i++) {
                if (path.charAt(i) == ' ') {
                    ans.append("Take ").append(temp_mode).append(" From ").append(temp_source).append(" to ");
                    temp_destination = numbermappingstate.get(temp_num);
                    ans.append(temp_destination).append(" then ");

                    temp_num = 0;
                    temp_mode = "";
                    temp_source = temp_destination;
                    temp_destination = "";
                } else if (path.charAt(i) == '_') {
                    continue;
                } else if (path.charAt(i) >= 'A' && path.charAt(i) <= 'Z') {
                    if (path.charAt(i) == 'B') {
                        temp_mode = "Bus";
                    } else if (path.charAt(i) == 'F') {
                        temp_mode = "Flight";
                    } else {
                        temp_mode = "Train";
                    }
                } else {
                    temp_num = temp_num * 10 + (path.charAt(i) - '0');
                }
            }
            ans.append(" it will take ").append(time).append(" hours that is minimum time");
            return ans.toString();
        }

        for (Pair<Integer, Pair<Integer, String>> it : adj.get(node)) {
            if (vis.get(it.second.first) == 0) {
                String temp = " " + it.second.first + "_" + it.second.second + " ";
                pq.add(new Pair<>(time + it.first, new Pair<>(it.second.first, path + temp));
            }
        }
    }
    return "no route";
}
