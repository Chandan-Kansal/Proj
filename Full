4
import java.util.*;

public class Main {
    static List<List<Pair<Float, Pair<Character, Integer>>> adj = new ArrayList<>();
    static Map<String, Integer> statemappingnumber = new HashMap<>();
    static Map<Integer, String> numbermappingstate = new HashMap<>();
    static int countOfState;

    public static void pathremove(StringBuilder s) {
        int n = s.length() - 1;
        while (true) {
            char c = s.charAt(n);
            if (c == '*') {
                s.deleteCharAt(n);
                break;
            } else {
                s.deleteCharAt(n);
            }
            n--;
        }
    }

    public static void dfs(int s, int d, List<Integer> vis, StringBuilder ans, StringBuilder path) {
        if (s == d) {
            ans.append(path);
            ans.append("?");
            return;
        }

        vis.set(s, 1);

        for (Pair<Float, Pair<Character, Integer>> it : adj.get(s)) {
            if (vis.get(it.second.second) == 0) {
                path.append('*');
                path.append(numbermappingstate.get(s));
                path.append("_");
                path.append(it.second.first);
                path.append("_");
                path.append(numbermappingstate.get(it.second.second));
                dfs(it.second.second, d, vis, ans, path);
                pathremove(path);
            }
        }
        vis.set(s, 0);
    }

    public static String allRoutee(int source, int destination) {
        List<Integer> vis = new ArrayList<>(Collections.nCopies(countOfState, 0));
        StringBuilder ans = new StringBuilder();
        StringBuilder path = new StringBuilder();
        dfs(source, destination, vis, ans, path);
        return ans.toString();
    }

    public static void addInGraph(int source, int destination, float price, float time, char mode) {
        adj.get(source).add(new Pair<>(new Pair<>(price, time), new Pair<>(mode, destination)));
    }

    public static void makeGraph(String source, String destination, float price, float time, char mode) {
        int source_num, destination_num;
        if (statemappingnumber.containsKey(source)) {
            source_num = statemappingnumber.get(source);
        } else {
            statemappingnumber.put(source, countOfState);
            source_num = countOfState;
            countOfState++;
        }

        if (statemappingnumber.containsKey(destination)) {
            destination_num = statemappingnumber.get(destination);
        } else {
            statemappingnumber.put(destination, countOfState);
            destination_num = countOfState;
            countOfState++;
        }
        addInGraph(source_num, destination_num, price, time, mode);
    }

    public static String fastestRoute(int source, int destination) {
        PriorityQueue<Pair<Float, Pair<Integer, StringBuilder>>> pq = new PriorityQueue<>(
                (a, b) -> Float.compare(a.first, b.first)
        );
        pq.add(new Pair<>(0.0f, new Pair<>(source, new StringBuilder())));

        List<Integer> vis = new ArrayList<>(Collections.nCopies(countOfState, 0));

        for (Map.Entry<String, Integer> entry : statemappingnumber.entrySet()) {
            numbermappingstate.put(entry.getValue(), entry.getKey());
        }

        while (!pq.isEmpty()) {
            float time = pq.peek().first;
            int node = pq.peek().second.first;
            StringBuilder path = pq.peek().second.second;
            pq.poll();
            vis.set(node, 1);

            if (node == destination) {
                StringBuilder ans = new StringBuilder();
                int temp_num = 0;
                String temp_mode = "";
                String temp_source = numbermappingstate.get(source);
                String temp_destination = "";

                for (int i = 1; i < path.length(); i++) {
                    char c = path.charAt(i);
                    if (c == ' ') {
                        ans.append("Take ");
                        ans.append(temp_mode);
                        ans.append(" From ");
                        ans.append(temp_source);
                        ans.append(" to ");
                        temp_num = 0;
                        temp_mode = "";
                        temp_source = temp_destination;
                        temp_destination = "";
                    } else if (c == '_') {
                        continue;
                    } else if (c >= 'A' && c <= 'Z') {
                        if (c == 'B') {
                            temp_mode = "Bus";
                        } else if (c == 'F') {
                            temp_mode = "Flight";
                        } else {
                            temp_mode = "Train";
                        }
                    } else {
                        temp_num = temp_num * 10 + (c - '0');
                    }
                }
                ans.append("it will take ");
                ans.append(time);
                ans.append(" hours that's Fastest Route");
                return ans.toString();
            }

            for (Pair<Float, Pair<Character, Integer>> it : adj.get(node)) {
                if (vis.get(it.second.second) == 0) {
                    StringBuilder temp = new StringBuilder();
                    temp.append(" ");
                    temp.append(it.second.second);
                    temp.append("_");
                    temp.append(it.second.first);
                    temp.append(" ");
                    pq.add(new Pair<>(time + it.first.second, new Pair<>(it.second.second, new StringBuilder(path.toString() + temp.toString())));
                }
            }
        }
        return "no route";
    }

    public static String cheapestRoute(int source, int destination) {
        PriorityQueue<Pair<Float, Pair<Integer, StringBuilder>>> pq = new PriorityQueue<>(
                (a, b) -> Float.compare(a.first, b.first)
        );
        pq.add(new Pair<>(0.0f, new Pair<>(source, new StringBuilder())));

        List<Integer> vis = new ArrayList<>(Collections.nCopies(countOfState, 0));

        while (!pq.isEmpty()) {
            float price = pq.peek().first;
            int node = pq.peek().second.first;
            StringBuilder path = pq.peek().second.second;
            pq.poll();
            vis.set(node, 1);

            if (node == destination) {
                StringBuilder ans = new StringBuilder();
                int temp_num = 0;
                String temp_mode = "";
                String temp_source = numbermappingstate.get(source);
                String temp_destination = "";

                for (int i = 1; i < path.length(); i++) {
                    char c = path.charAt(i);
                    if (c == ' ') {
                        ans.append("Take ");
                        ans.append(temp_mode);
                        ans.append(" From ");
                        ans.append(temp_source);
                        ans.append(" to ");
                        temp_num = 0;
                        temp_mode = "";
                        temp_source = temp_destination;
                        temp_destination = "";
                    } else if (c == '_') {
                        continue;
                    } else if (c >= 'A' &&                     c <= 'Z') {
                    if (c == 'B') {
                        temp_mode = "Bus";
                    } else if (c == 'F') {
                        temp_mode = "Flight";
                    } else {
                        temp_mode = "Train";
                    }
                } else {
                    temp_num = temp_num * 10 + (c - '0');
                }
            }
            ans.append(" it will take ");
            ans.append(price);
            ans.append("Rs that is the minimum price");
            return ans.toString();
        }

        for (Pair<Float, Pair<Character, Integer>> it : adj.get(node)) {
            if (vis.get(it.second.second) == 0) {
                StringBuilder temp = new StringBuilder();
                temp.append(" ");
                temp.append(it.second.second);
                temp.append("_");
                temp.append(it.second.first);
                temp.append(" ");
                pq.add(new Pair<>(price + it.first.first, new Pair<>(it.second.second, new StringBuilder(path.toString() + temp.toString())));
            }
        }
    }
    return "no route";
}

public static void main(String[] args) {
    for (int i = 0; i < 1000000; i++) {
        adj.add(new ArrayList<>());
    }

    makeGraph("Delhi", "Chandigarh", 2000.0f, 2.0f, 'F');
    makeGraph("Delhi", "Chandigarh", 700.0f, 6.0f, 'B');
    makeGraph("Delhi", "Patiala", 1100.0f, 6.0f, 'T');
    makeGraph("Delhi", "Patiala", 900.0f, 8.0f, 'B');
    makeGraph("Delhi", "Jammu", 7000.0f, 4.2f, 'F');
    makeGraph("Jammu", "Katra", 200.0f, 2.0f, 'B');
    makeGraph("Jammu", "Patiala", 1100.0f, 11.0f, 'T');
    makeGraph("Patiala", "Katra", 800.0f, 6.0f, 'T');
    makeGraph("Patiala", "Katra", 700.0f, 7.0f, 'B');

    makeGraph("Chandigarh", "Delhi", 2000.0f, 2.0f, 'F');
    makeGraph("Chandigarh", "Delhi", 700.0f, 6.0f, 'B');
    makeGraph("Patiala", "Delhi", 1100.0f, 6.0f, 'T');
    makeGraph("Patiala", "Delhi", 900.0f, 8.0f, 'B');
    makeGraph("Jammu", "Delhi", 7000.0f, 4.2f, 'F');
    makeGraph("Katra", "Jammu", 200.0f, 2.0f, 'B');
    makeGraph("Patiala", "Jammu", 1100.0f, 11.0f, 'T');
    makeGraph("Katra", "Patiala", 800.0f, 6.0f, 'T');
    makeGraph("Katra", "Patiala", 700.0f, 7.0f, 'B');

    for (Map.Entry<String, Integer> entry : statemappingnumber.entrySet()) {
        numbermappingstate.put(entry.getValue(), entry.getKey());
    }

    System.out.println(cheapestRoute(statemappingnumber.get("Delhi"), statemappingnumber.get("Katra"));
    // System.out.println(fastestRoute(statemappingnumber.get("Delhi"), statemappingnumber.get("Katra"));
}

